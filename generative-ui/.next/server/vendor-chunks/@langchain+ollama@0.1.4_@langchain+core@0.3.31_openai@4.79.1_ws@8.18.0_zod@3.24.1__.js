"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__";
exports.ids = ["vendor-chunks/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/chat_models.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/chat_models.js ***!
  \*******************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOllama: () => (/* binding */ ChatOllama)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var ollama_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ollama/browser */ \"(rsc)/./node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/browser.mjs\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_utils_stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/utils/stream */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/utils/stream.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/utils.js\");\n\n\n\n\n\n\n\n\n/**\n * Ollama chat model integration.\n *\n * Setup:\n * Install `@langchain/ollama` and the Ollama app.\n *\n * ```bash\n * npm install @langchain/ollama\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_ollama.ChatOllama.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/_langchain_ollama.ChatOllamaCallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     stop: [\"\\n\"],\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatOllama } from '@langchain/ollama';\n *\n * const llm = new ChatOllama({\n *   model: \"llama-3.1:8b\",\n *   temperature: 0,\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"content\": \"The translation of \\\"I love programming\\\" into French is:\\n\\n\\\"J'adore programmer.\\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"model\": \"llama3.1:8b\",\n *     \"created_at\": \"2024-08-12T22:12:23.09468Z\",\n *     \"done_reason\": \"stop\",\n *     \"done\": true,\n *     \"total_duration\": 3715571291,\n *     \"load_duration\": 35244375,\n *     \"prompt_eval_count\": 19,\n *     \"prompt_eval_duration\": 3092116000,\n *     \"eval_count\": 20,\n *     \"eval_duration\": 585789000\n *   },\n *   \"tool_calls\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 20,\n *     \"total_tokens\": 39\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"content\": \"The\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" translation\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" of\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \" \\\"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \"I\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * ...\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {},\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": []\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"additional_kwargs\": {},\n *   \"response_metadata\": {\n *     \"model\": \"llama3.1:8b\",\n *     \"created_at\": \"2024-08-12T22:13:22.22423Z\",\n *     \"done_reason\": \"stop\",\n *     \"done\": true,\n *     \"total_duration\": 8599883208,\n *     \"load_duration\": 35975875,\n *     \"prompt_eval_count\": 19,\n *     \"prompt_eval_duration\": 7918195000,\n *     \"eval_count\": 20,\n *     \"eval_duration\": 643569000\n *   },\n *   \"tool_calls\": [],\n *   \"tool_call_chunks\": [],\n *   \"invalid_tool_calls\": [],\n *   \"usage_metadata\": {\n *     \"input_tokens\": 19,\n *     \"output_tokens\": 20,\n *     \"total_tokens\": 39\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     id: '49410cad-2163-415e-bdcd-d26938a9c8c5',\n *     type: 'tool_call'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     id: '39e230e4-63ec-4fae-9df0-21c3abe735ad',\n *     type: 'tool_call'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   punchline: 'Why did the cat join a band? Because it wanted to be the purr-cussionist!',\n *   rating: 8,\n *   setup: 'A cat walks into a music store and asks the owner...'\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 19, output_tokens: 20, total_tokens: 39 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   model: 'llama3.1:8b',\n *   created_at: '2024-08-12T22:17:42.274795Z',\n *   done_reason: 'stop',\n *   done: true,\n *   total_duration: 6767071209,\n *   load_duration: 31628209,\n *   prompt_eval_count: 19,\n *   prompt_eval_duration: 6124504000,\n *   eval_count: 20,\n *   eval_duration: 608785000\n * }\n * ```\n * </details>\n *\n * <br />\n */\nclass ChatOllama extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_1__.BaseChatModel {\n    // Used for tracing, replace with the same name as your class\n    static lc_name() {\n        return \"ChatOllama\";\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"llama3\"\n        });\n        Object.defineProperty(this, \"numa\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numCtx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numBatch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mainGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lowVram\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"f16Kv\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitsAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"vocabOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMmap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMlock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"embeddingOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numThread\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numKeep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"seed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numPredict\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tfsZ\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"typicalP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatLastN\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatTau\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatEta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"penalizeNewline\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"format\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keepAlive\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"checkOrPullModel\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"http://127.0.0.1:11434\"\n        });\n        this.client = new ollama_browser__WEBPACK_IMPORTED_MODULE_2__.Ollama({\n            host: fields?.baseUrl,\n            headers: fields?.headers,\n        });\n        this.baseUrl = fields?.baseUrl ?? this.baseUrl;\n        this.model = fields?.model ?? this.model;\n        this.numa = fields?.numa;\n        this.numCtx = fields?.numCtx;\n        this.numBatch = fields?.numBatch;\n        this.numGpu = fields?.numGpu;\n        this.mainGpu = fields?.mainGpu;\n        this.lowVram = fields?.lowVram;\n        this.f16Kv = fields?.f16Kv;\n        this.logitsAll = fields?.logitsAll;\n        this.vocabOnly = fields?.vocabOnly;\n        this.useMmap = fields?.useMmap;\n        this.useMlock = fields?.useMlock;\n        this.embeddingOnly = fields?.embeddingOnly;\n        this.numThread = fields?.numThread;\n        this.numKeep = fields?.numKeep;\n        this.seed = fields?.seed;\n        this.numPredict = fields?.numPredict;\n        this.topK = fields?.topK;\n        this.topP = fields?.topP;\n        this.tfsZ = fields?.tfsZ;\n        this.typicalP = fields?.typicalP;\n        this.repeatLastN = fields?.repeatLastN;\n        this.temperature = fields?.temperature;\n        this.repeatPenalty = fields?.repeatPenalty;\n        this.presencePenalty = fields?.presencePenalty;\n        this.frequencyPenalty = fields?.frequencyPenalty;\n        this.mirostat = fields?.mirostat;\n        this.mirostatTau = fields?.mirostatTau;\n        this.mirostatEta = fields?.mirostatEta;\n        this.penalizeNewline = fields?.penalizeNewline;\n        this.streaming = fields?.streaming;\n        this.format = fields?.format;\n        this.keepAlive = fields?.keepAlive;\n        this.checkOrPullModel = fields?.checkOrPullModel ?? this.checkOrPullModel;\n    }\n    // Replace\n    _llmType() {\n        return \"ollama\";\n    }\n    /**\n     * Download a model onto the local machine.\n     *\n     * @param {string} model The name of the model to download.\n     * @param {PullModelOptions | undefined} options Options for pulling the model.\n     * @returns {Promise<void>}\n     */\n    async pull(model, options) {\n        const { stream, insecure, logProgress } = {\n            stream: true,\n            ...options,\n        };\n        if (stream) {\n            for await (const chunk of await this.client.pull({\n                model,\n                insecure,\n                stream,\n            })) {\n                if (logProgress) {\n                    console.log(chunk);\n                }\n            }\n        }\n        else {\n            const response = await this.client.pull({ model, insecure });\n            if (logProgress) {\n                console.log(response);\n            }\n        }\n    }\n    bindTools(tools, kwargs) {\n        return this.bind({\n            tools: tools.map((tool) => (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__.convertToOpenAITool)(tool)),\n            ...kwargs,\n        });\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"ollama\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.options?.temperature ?? undefined,\n            ls_max_tokens: params.options?.num_predict ?? undefined,\n            ls_stop: options.stop,\n        };\n    }\n    invocationParams(options) {\n        if (options?.tool_choice) {\n            throw new Error(\"Tool choice is not supported for ChatOllama.\");\n        }\n        return {\n            model: this.model,\n            format: this.format,\n            keep_alive: this.keepAlive,\n            options: {\n                numa: this.numa,\n                num_ctx: this.numCtx,\n                num_batch: this.numBatch,\n                num_gpu: this.numGpu,\n                main_gpu: this.mainGpu,\n                low_vram: this.lowVram,\n                f16_kv: this.f16Kv,\n                logits_all: this.logitsAll,\n                vocab_only: this.vocabOnly,\n                use_mmap: this.useMmap,\n                use_mlock: this.useMlock,\n                embedding_only: this.embeddingOnly,\n                num_thread: this.numThread,\n                num_keep: this.numKeep,\n                seed: this.seed,\n                num_predict: this.numPredict,\n                top_k: this.topK,\n                top_p: this.topP,\n                tfs_z: this.tfsZ,\n                typical_p: this.typicalP,\n                repeat_last_n: this.repeatLastN,\n                temperature: this.temperature,\n                repeat_penalty: this.repeatPenalty,\n                presence_penalty: this.presencePenalty,\n                frequency_penalty: this.frequencyPenalty,\n                mirostat: this.mirostat,\n                mirostat_tau: this.mirostatTau,\n                mirostat_eta: this.mirostatEta,\n                penalize_newline: this.penalizeNewline,\n                stop: options?.stop,\n            },\n            tools: options?.tools?.length\n                ? options.tools.map((tool) => (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__.convertToOpenAITool)(tool))\n                : undefined,\n        };\n    }\n    /**\n     * Check if a model exists on the local machine.\n     *\n     * @param {string} model The name of the model to check.\n     * @returns {Promise<boolean>} Whether or not the model exists.\n     */\n    async checkModelExistsOnMachine(model) {\n        const { models } = await this.client.list();\n        return !!models.find((m) => m.name === model || m.name === `${model}:latest`);\n    }\n    async _generate(messages, options, runManager) {\n        if (this.checkOrPullModel) {\n            if (!(await this.checkModelExistsOnMachine(this.model))) {\n                await this.pull(this.model, {\n                    logProgress: true,\n                });\n            }\n        }\n        let finalChunk;\n        for await (const chunk of this._streamResponseChunks(messages, options, runManager)) {\n            if (!finalChunk) {\n                finalChunk = chunk.message;\n            }\n            else {\n                finalChunk = (0,_langchain_core_utils_stream__WEBPACK_IMPORTED_MODULE_5__.concat)(finalChunk, chunk.message);\n            }\n        }\n        // Convert from AIMessageChunk to AIMessage since `generate` expects AIMessage.\n        const nonChunkMessage = new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage({\n            id: finalChunk?.id,\n            content: finalChunk?.content ?? \"\",\n            tool_calls: finalChunk?.tool_calls,\n            response_metadata: finalChunk?.response_metadata,\n            usage_metadata: finalChunk?.usage_metadata,\n        });\n        return {\n            generations: [\n                {\n                    text: typeof nonChunkMessage.content === \"string\"\n                        ? nonChunkMessage.content\n                        : \"\",\n                    message: nonChunkMessage,\n                },\n            ],\n        };\n    }\n    /**\n     * Implement to support streaming.\n     * Should yield chunks iteratively.\n     */\n    async *_streamResponseChunks(messages, options, runManager) {\n        if (this.checkOrPullModel) {\n            if (!(await this.checkModelExistsOnMachine(this.model))) {\n                await this.pull(this.model, {\n                    logProgress: true,\n                });\n            }\n        }\n        const params = this.invocationParams(options);\n        // TODO: remove cast after SDK adds support for tool calls\n        const ollamaMessages = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.convertToOllamaMessages)(messages);\n        const usageMetadata = {\n            input_tokens: 0,\n            output_tokens: 0,\n            total_tokens: 0,\n        };\n        if (params.tools && params.tools.length > 0) {\n            const toolResult = await this.client.chat({\n                ...params,\n                messages: ollamaMessages,\n                stream: false, // Ollama currently does not support streaming with tools\n            });\n            const { message: responseMessage, ...rest } = toolResult;\n            usageMetadata.input_tokens += rest.prompt_eval_count ?? 0;\n            usageMetadata.output_tokens += rest.eval_count ?? 0;\n            usageMetadata.total_tokens =\n                usageMetadata.input_tokens + usageMetadata.output_tokens;\n            yield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__.ChatGenerationChunk({\n                text: responseMessage.content,\n                message: (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.convertOllamaMessagesToLangChain)(responseMessage, {\n                    responseMetadata: rest,\n                    usageMetadata,\n                }),\n            });\n            return runManager?.handleLLMNewToken(responseMessage.content);\n        }\n        const stream = await this.client.chat({\n            ...params,\n            messages: ollamaMessages,\n            stream: true,\n        });\n        let lastMetadata;\n        for await (const chunk of stream) {\n            if (options.signal?.aborted) {\n                this.client.abort();\n            }\n            const { message: responseMessage, ...rest } = chunk;\n            usageMetadata.input_tokens += rest.prompt_eval_count ?? 0;\n            usageMetadata.output_tokens += rest.eval_count ?? 0;\n            usageMetadata.total_tokens =\n                usageMetadata.input_tokens + usageMetadata.output_tokens;\n            lastMetadata = rest;\n            yield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__.ChatGenerationChunk({\n                text: responseMessage.content ?? \"\",\n                message: (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.convertOllamaMessagesToLangChain)(responseMessage),\n            });\n            await runManager?.handleLLMNewToken(responseMessage.content ?? \"\");\n        }\n        // Yield the `response_metadata` as the final chunk.\n        yield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__.ChatGenerationChunk({\n            text: \"\",\n            message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n                content: \"\",\n                response_metadata: lastMetadata,\n                usage_metadata: usageMetadata,\n            }),\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/embeddings.js":
/*!******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/embeddings.js ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OllamaEmbeddings: () => (/* binding */ OllamaEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var ollama_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ollama/browser */ \"(rsc)/./node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/browser.mjs\");\n\n\nclass OllamaEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_0__.Embeddings {\n    constructor(fields) {\n        super({ maxConcurrency: 1, ...fields });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"mxbai-embed-large\"\n        });\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"http://localhost:11434\"\n        });\n        Object.defineProperty(this, \"keepAlive\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"requestOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"truncate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.client = new ollama_browser__WEBPACK_IMPORTED_MODULE_1__.Ollama({\n            host: fields?.baseUrl,\n            headers: fields?.headers ? new Headers(fields.headers) : undefined,\n        });\n        this.baseUrl = fields?.baseUrl ?? this.baseUrl;\n        this.model = fields?.model ?? this.model;\n        this.keepAlive = fields?.keepAlive;\n        this.truncate = fields?.truncate ?? this.truncate;\n        this.requestOptions = fields?.requestOptions\n            ? this._convertOptions(fields?.requestOptions)\n            : undefined;\n    }\n    /** convert camelCased Ollama request options like \"useMMap\" to\n     * the snake_cased equivalent which the ollama API actually uses.\n     * Used only for consistency with the llms/Ollama and chatModels/Ollama classes\n     */\n    _convertOptions(requestOptions) {\n        const snakeCasedOptions = {};\n        const mapping = {\n            embeddingOnly: \"embedding_only\",\n            frequencyPenalty: \"frequency_penalty\",\n            keepAlive: \"keep_alive\",\n            logitsAll: \"logits_all\",\n            lowVram: \"low_vram\",\n            mainGpu: \"main_gpu\",\n            mirostat: \"mirostat\",\n            mirostatEta: \"mirostat_eta\",\n            mirostatTau: \"mirostat_tau\",\n            numBatch: \"num_batch\",\n            numCtx: \"num_ctx\",\n            numGpu: \"num_gpu\",\n            numKeep: \"num_keep\",\n            numPredict: \"num_predict\",\n            numThread: \"num_thread\",\n            penalizeNewline: \"penalize_newline\",\n            presencePenalty: \"presence_penalty\",\n            repeatLastN: \"repeat_last_n\",\n            repeatPenalty: \"repeat_penalty\",\n            temperature: \"temperature\",\n            stop: \"stop\",\n            tfsZ: \"tfs_z\",\n            topK: \"top_k\",\n            topP: \"top_p\",\n            typicalP: \"typical_p\",\n            useMlock: \"use_mlock\",\n            useMmap: \"use_mmap\",\n            vocabOnly: \"vocab_only\",\n            f16Kv: \"f16_kv\",\n            numa: \"numa\",\n            seed: \"seed\",\n        };\n        for (const [key, value] of Object.entries(requestOptions)) {\n            const snakeCasedOption = mapping[key];\n            if (snakeCasedOption) {\n                snakeCasedOptions[snakeCasedOption] = value;\n            }\n            else {\n                // Just pass unknown options through\n                snakeCasedOptions[key] = value;\n            }\n        }\n        return snakeCasedOptions;\n    }\n    async embedDocuments(texts) {\n        return this.embeddingWithRetry(texts);\n    }\n    async embedQuery(text) {\n        return (await this.embeddingWithRetry([text]))[0];\n    }\n    async embeddingWithRetry(texts) {\n        const res = await this.caller.call(() => this.client.embed({\n            model: this.model,\n            input: texts,\n            keep_alive: this.keepAlive,\n            options: this.requestOptions,\n            truncate: this.truncate,\n        }));\n        return res.embeddings;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvbGxhbWFAMC4xLjRfQGxhbmdjaGFpbitjb3JlQDAuMy4zMV9vcGVuYWlANC43OS4xX3dzQDguMTguMF96b2RAMy4yNC4xX18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb2xsYW1hL2Rpc3QvZW1iZWRkaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDaEI7QUFDakMsK0JBQStCLGtFQUFVO0FBQ2hEO0FBQ0EsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwwQkFBMEIsa0RBQU07QUFDaEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZ2NoYWluLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29sbGFtYUAwLjEuNF9AbGFuZ2NoYWluK2NvcmVAMC4zLjMxX29wZW5haUA0Ljc5LjFfd3NAOC4xOC4wX3pvZEAzLjI0LjFfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vbGxhbWEvZGlzdC9lbWJlZGRpbmdzLmpzPzM4NzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1iZWRkaW5ncyB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZW1iZWRkaW5nc1wiO1xuaW1wb3J0IHsgT2xsYW1hIH0gZnJvbSBcIm9sbGFtYS9icm93c2VyXCI7XG5leHBvcnQgY2xhc3MgT2xsYW1hRW1iZWRkaW5ncyBleHRlbmRzIEVtYmVkZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7IG1heENvbmN1cnJlbmN5OiAxLCAuLi5maWVsZHMgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1vZGVsXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIm14YmFpLWVtYmVkLWxhcmdlXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImJhc2VVcmxcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiaHR0cDovL2xvY2FsaG9zdDoxMTQzNFwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJrZWVwQWxpdmVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVxdWVzdE9wdGlvbnNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xpZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRydW5jYXRlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgT2xsYW1hKHtcbiAgICAgICAgICAgIGhvc3Q6IGZpZWxkcz8uYmFzZVVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGZpZWxkcz8uaGVhZGVycyA/IG5ldyBIZWFkZXJzKGZpZWxkcy5oZWFkZXJzKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGZpZWxkcz8uYmFzZVVybCA/PyB0aGlzLmJhc2VVcmw7XG4gICAgICAgIHRoaXMubW9kZWwgPSBmaWVsZHM/Lm1vZGVsID8/IHRoaXMubW9kZWw7XG4gICAgICAgIHRoaXMua2VlcEFsaXZlID0gZmllbGRzPy5rZWVwQWxpdmU7XG4gICAgICAgIHRoaXMudHJ1bmNhdGUgPSBmaWVsZHM/LnRydW5jYXRlID8/IHRoaXMudHJ1bmNhdGU7XG4gICAgICAgIHRoaXMucmVxdWVzdE9wdGlvbnMgPSBmaWVsZHM/LnJlcXVlc3RPcHRpb25zXG4gICAgICAgICAgICA/IHRoaXMuX2NvbnZlcnRPcHRpb25zKGZpZWxkcz8ucmVxdWVzdE9wdGlvbnMpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqIGNvbnZlcnQgY2FtZWxDYXNlZCBPbGxhbWEgcmVxdWVzdCBvcHRpb25zIGxpa2UgXCJ1c2VNTWFwXCIgdG9cbiAgICAgKiB0aGUgc25ha2VfY2FzZWQgZXF1aXZhbGVudCB3aGljaCB0aGUgb2xsYW1hIEFQSSBhY3R1YWxseSB1c2VzLlxuICAgICAqIFVzZWQgb25seSBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGUgbGxtcy9PbGxhbWEgYW5kIGNoYXRNb2RlbHMvT2xsYW1hIGNsYXNzZXNcbiAgICAgKi9cbiAgICBfY29udmVydE9wdGlvbnMocmVxdWVzdE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc25ha2VDYXNlZE9wdGlvbnMgPSB7fTtcbiAgICAgICAgY29uc3QgbWFwcGluZyA9IHtcbiAgICAgICAgICAgIGVtYmVkZGluZ09ubHk6IFwiZW1iZWRkaW5nX29ubHlcIixcbiAgICAgICAgICAgIGZyZXF1ZW5jeVBlbmFsdHk6IFwiZnJlcXVlbmN5X3BlbmFsdHlcIixcbiAgICAgICAgICAgIGtlZXBBbGl2ZTogXCJrZWVwX2FsaXZlXCIsXG4gICAgICAgICAgICBsb2dpdHNBbGw6IFwibG9naXRzX2FsbFwiLFxuICAgICAgICAgICAgbG93VnJhbTogXCJsb3dfdnJhbVwiLFxuICAgICAgICAgICAgbWFpbkdwdTogXCJtYWluX2dwdVwiLFxuICAgICAgICAgICAgbWlyb3N0YXQ6IFwibWlyb3N0YXRcIixcbiAgICAgICAgICAgIG1pcm9zdGF0RXRhOiBcIm1pcm9zdGF0X2V0YVwiLFxuICAgICAgICAgICAgbWlyb3N0YXRUYXU6IFwibWlyb3N0YXRfdGF1XCIsXG4gICAgICAgICAgICBudW1CYXRjaDogXCJudW1fYmF0Y2hcIixcbiAgICAgICAgICAgIG51bUN0eDogXCJudW1fY3R4XCIsXG4gICAgICAgICAgICBudW1HcHU6IFwibnVtX2dwdVwiLFxuICAgICAgICAgICAgbnVtS2VlcDogXCJudW1fa2VlcFwiLFxuICAgICAgICAgICAgbnVtUHJlZGljdDogXCJudW1fcHJlZGljdFwiLFxuICAgICAgICAgICAgbnVtVGhyZWFkOiBcIm51bV90aHJlYWRcIixcbiAgICAgICAgICAgIHBlbmFsaXplTmV3bGluZTogXCJwZW5hbGl6ZV9uZXdsaW5lXCIsXG4gICAgICAgICAgICBwcmVzZW5jZVBlbmFsdHk6IFwicHJlc2VuY2VfcGVuYWx0eVwiLFxuICAgICAgICAgICAgcmVwZWF0TGFzdE46IFwicmVwZWF0X2xhc3RfblwiLFxuICAgICAgICAgICAgcmVwZWF0UGVuYWx0eTogXCJyZXBlYXRfcGVuYWx0eVwiLFxuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IFwidGVtcGVyYXR1cmVcIixcbiAgICAgICAgICAgIHN0b3A6IFwic3RvcFwiLFxuICAgICAgICAgICAgdGZzWjogXCJ0ZnNfelwiLFxuICAgICAgICAgICAgdG9wSzogXCJ0b3Bfa1wiLFxuICAgICAgICAgICAgdG9wUDogXCJ0b3BfcFwiLFxuICAgICAgICAgICAgdHlwaWNhbFA6IFwidHlwaWNhbF9wXCIsXG4gICAgICAgICAgICB1c2VNbG9jazogXCJ1c2VfbWxvY2tcIixcbiAgICAgICAgICAgIHVzZU1tYXA6IFwidXNlX21tYXBcIixcbiAgICAgICAgICAgIHZvY2FiT25seTogXCJ2b2NhYl9vbmx5XCIsXG4gICAgICAgICAgICBmMTZLdjogXCJmMTZfa3ZcIixcbiAgICAgICAgICAgIG51bWE6IFwibnVtYVwiLFxuICAgICAgICAgICAgc2VlZDogXCJzZWVkXCIsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJlcXVlc3RPcHRpb25zKSkge1xuICAgICAgICAgICAgY29uc3Qgc25ha2VDYXNlZE9wdGlvbiA9IG1hcHBpbmdba2V5XTtcbiAgICAgICAgICAgIGlmIChzbmFrZUNhc2VkT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgc25ha2VDYXNlZE9wdGlvbnNbc25ha2VDYXNlZE9wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEp1c3QgcGFzcyB1bmtub3duIG9wdGlvbnMgdGhyb3VnaFxuICAgICAgICAgICAgICAgIHNuYWtlQ2FzZWRPcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc25ha2VDYXNlZE9wdGlvbnM7XG4gICAgfVxuICAgIGFzeW5jIGVtYmVkRG9jdW1lbnRzKHRleHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYmVkZGluZ1dpdGhSZXRyeSh0ZXh0cyk7XG4gICAgfVxuICAgIGFzeW5jIGVtYmVkUXVlcnkodGV4dCkge1xuICAgICAgICByZXR1cm4gKGF3YWl0IHRoaXMuZW1iZWRkaW5nV2l0aFJldHJ5KFt0ZXh0XSkpWzBdO1xuICAgIH1cbiAgICBhc3luYyBlbWJlZGRpbmdXaXRoUmV0cnkodGV4dHMpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jYWxsZXIuY2FsbCgoKSA9PiB0aGlzLmNsaWVudC5lbWJlZCh7XG4gICAgICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgICAgIGlucHV0OiB0ZXh0cyxcbiAgICAgICAgICAgIGtlZXBfYWxpdmU6IHRoaXMua2VlcEFsaXZlLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIHRydW5jYXRlOiB0aGlzLnRydW5jYXRlLFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiByZXMuZW1iZWRkaW5ncztcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/index.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/index.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOllama: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatOllama),\n/* harmony export */   Ollama: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_3__.Ollama),\n/* harmony export */   OllamaEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_1__.OllamaEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/chat_models.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/embeddings.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/types.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./llms.js */ \"(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/llms.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvbGxhbWFAMC4xLjRfQGxhbmdjaGFpbitjb3JlQDAuMy4zMV9vcGVuYWlANC43OS4xX3dzQDguMTguMF96b2RAMy4yNC4xX18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb2xsYW1hL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpQztBQUNEO0FBQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhbmdjaGFpbi1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvbGxhbWFAMC4xLjRfQGxhbmdjaGFpbitjb3JlQDAuMy4zMV9vcGVuYWlANC43OS4xX3dzQDguMTguMF96b2RAMy4yNC4xX18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb2xsYW1hL2Rpc3QvaW5kZXguanM/NDQ1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jaGF0X21vZGVscy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZW1iZWRkaW5ncy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xsbXMuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/llms.js":
/*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/llms.js ***!
  \************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ollama: () => (/* binding */ Ollama)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var ollama_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ollama/browser */ \"(rsc)/./node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/browser.mjs\");\n\n\n\n/**\n * Class that represents the Ollama language model. It extends the base\n * LLM class and implements the OllamaInput interface.\n * @example\n * ```typescript\n * const ollama = new Ollama({\n *   baseUrl: \"http://api.example.com\",\n *   model: \"llama3\",\n * });\n *\n * // Streaming translation from English to German\n * const stream = await ollama.stream(\n *   `Translate \"I love programming\" into German.`\n * );\n *\n * const chunks = [];\n * for await (const chunk of stream) {\n *   chunks.push(chunk);\n * }\n *\n * console.log(chunks.join(\"\"));\n * ```\n */\nclass Ollama extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_1__.LLM {\n    static lc_name() {\n        return \"Ollama\";\n    }\n    constructor(fields) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"llama3\"\n        });\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"http://localhost:11434\"\n        });\n        Object.defineProperty(this, \"keepAlive\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"embeddingOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"f16KV\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitsAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lowVram\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mainGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatEta\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"mirostatTau\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numBatch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numCtx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numGpu\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numKeep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numPredict\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"numThread\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"penalizeNewline\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatLastN\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"repeatPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tfsZ\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"typicalP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMLock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"useMMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"vocabOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"format\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.model = fields?.model ?? this.model;\n        this.baseUrl = fields?.baseUrl?.endsWith(\"/\")\n            ? fields?.baseUrl.slice(0, -1)\n            : fields?.baseUrl ?? this.baseUrl;\n        this.client = new ollama_browser__WEBPACK_IMPORTED_MODULE_2__.Ollama({\n            host: this.baseUrl,\n            headers: fields?.headers,\n        });\n        this.keepAlive = fields?.keepAlive;\n        this.embeddingOnly = fields?.embeddingOnly;\n        this.f16KV = fields?.f16Kv;\n        this.frequencyPenalty = fields?.frequencyPenalty;\n        this.logitsAll = fields?.logitsAll;\n        this.lowVram = fields?.lowVram;\n        this.mainGpu = fields?.mainGpu;\n        this.mirostat = fields?.mirostat;\n        this.mirostatEta = fields?.mirostatEta;\n        this.mirostatTau = fields?.mirostatTau;\n        this.numBatch = fields?.numBatch;\n        this.numCtx = fields?.numCtx;\n        this.numGpu = fields?.numGpu;\n        this.numKeep = fields?.numKeep;\n        this.numPredict = fields?.numPredict;\n        this.numThread = fields?.numThread;\n        this.penalizeNewline = fields?.penalizeNewline;\n        this.presencePenalty = fields?.presencePenalty;\n        this.repeatLastN = fields?.repeatLastN;\n        this.repeatPenalty = fields?.repeatPenalty;\n        this.temperature = fields?.temperature;\n        this.stop = fields?.stop;\n        this.tfsZ = fields?.tfsZ;\n        this.topK = fields?.topK;\n        this.topP = fields?.topP;\n        this.typicalP = fields?.typicalP;\n        this.useMLock = fields?.useMlock;\n        this.useMMap = fields?.useMmap;\n        this.vocabOnly = fields?.vocabOnly;\n        this.format = fields?.format;\n    }\n    _llmType() {\n        return \"ollama\";\n    }\n    invocationParams(options) {\n        return {\n            model: this.model,\n            format: this.format,\n            keep_alive: this.keepAlive,\n            images: options?.images,\n            options: {\n                embedding_only: this.embeddingOnly,\n                f16_kv: this.f16KV,\n                frequency_penalty: this.frequencyPenalty,\n                logits_all: this.logitsAll,\n                low_vram: this.lowVram,\n                main_gpu: this.mainGpu,\n                mirostat: this.mirostat,\n                mirostat_eta: this.mirostatEta,\n                mirostat_tau: this.mirostatTau,\n                num_batch: this.numBatch,\n                num_ctx: this.numCtx,\n                num_gpu: this.numGpu,\n                num_keep: this.numKeep,\n                num_predict: this.numPredict,\n                num_thread: this.numThread,\n                penalize_newline: this.penalizeNewline,\n                presence_penalty: this.presencePenalty,\n                repeat_last_n: this.repeatLastN,\n                repeat_penalty: this.repeatPenalty,\n                temperature: this.temperature,\n                stop: options?.stop ?? this.stop,\n                tfs_z: this.tfsZ,\n                top_k: this.topK,\n                top_p: this.topP,\n                typical_p: this.typicalP,\n                use_mlock: this.useMLock,\n                use_mmap: this.useMMap,\n                vocab_only: this.vocabOnly,\n            },\n        };\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const stream = await this.caller.call(async () => this.client.generate({\n            ...this.invocationParams(options),\n            prompt,\n            stream: true,\n        }));\n        for await (const chunk of stream) {\n            if (options.signal?.aborted) {\n                throw new Error(\"This operation was aborted\");\n            }\n            if (!chunk.done) {\n                yield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk({\n                    text: chunk.response,\n                    generationInfo: {\n                        ...chunk,\n                        response: undefined,\n                    },\n                });\n                await runManager?.handleLLMNewToken(chunk.response ?? \"\");\n            }\n            else {\n                yield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk({\n                    text: \"\",\n                    generationInfo: {\n                        model: chunk.model,\n                        total_duration: chunk.total_duration,\n                        load_duration: chunk.load_duration,\n                        prompt_eval_count: chunk.prompt_eval_count,\n                        prompt_eval_duration: chunk.prompt_eval_duration,\n                        eval_count: chunk.eval_count,\n                        eval_duration: chunk.eval_duration,\n                    },\n                });\n            }\n        }\n    }\n    /** @ignore */\n    async _call(prompt, options, runManager) {\n        const chunks = [];\n        for await (const chunk of this._streamResponseChunks(prompt, options, runManager)) {\n            chunks.push(chunk.text);\n        }\n        return chunks.join(\"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/types.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/types.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvbGxhbWFAMC4xLjRfQGxhbmdjaGFpbitjb3JlQDAuMy4zMV9vcGVuYWlANC43OS4xX3dzQDguMTguMF96b2RAMy4yNC4xX18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb2xsYW1hL2Rpc3QvdHlwZXMuanMiLCJtYXBwaW5ncyI6IjtBQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFuZ2NoYWluLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29sbGFtYUAwLjEuNF9AbGFuZ2NoYWluK2NvcmVAMC4zLjMxX29wZW5haUA0Ljc5LjFfd3NAOC4xOC4wX3pvZEAzLjI0LjFfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vbGxhbWEvZGlzdC90eXBlcy5qcz9iYzk5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/utils.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/utils.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertOllamaMessagesToLangChain: () => (/* binding */ convertOllamaMessagesToLangChain),\n/* harmony export */   convertToOllamaMessages: () => (/* binding */ convertToOllamaMessages)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1_/node_modules/@langchain/core/messages.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/.pnpm/uuid@10.0.0/node_modules/uuid/dist/esm-node/v4.js\");\n\n\nfunction convertOllamaMessagesToLangChain(messages, extra) {\n    return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n        content: messages.content ?? \"\",\n        tool_call_chunks: messages.tool_calls?.map((tc) => ({\n            name: tc.function.name,\n            args: JSON.stringify(tc.function.arguments),\n            type: \"tool_call_chunk\",\n            index: 0,\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n        })),\n        response_metadata: extra?.responseMetadata,\n        usage_metadata: extra?.usageMetadata,\n    });\n}\nfunction extractBase64FromDataUrl(dataUrl) {\n    const match = dataUrl.match(/^data:.*?;base64,(.*)$/);\n    return match ? match[1] : \"\";\n}\nfunction convertAMessagesToOllama(messages) {\n    if (typeof messages.content === \"string\") {\n        return [\n            {\n                role: \"assistant\",\n                content: messages.content,\n            },\n        ];\n    }\n    const textFields = messages.content.filter((c) => c.type === \"text\" && typeof c.text === \"string\");\n    const textMessages = textFields.map((c) => ({\n        role: \"assistant\",\n        content: c.text,\n    }));\n    let toolCallMsgs;\n    if (messages.content.find((c) => c.type === \"tool_use\") &&\n        messages.tool_calls?.length) {\n        // `tool_use` content types are accepted if the message has tool calls\n        const toolCalls = messages.tool_calls?.map((tc) => ({\n            id: tc.id,\n            type: \"function\",\n            function: {\n                name: tc.name,\n                arguments: tc.args,\n            },\n        }));\n        if (toolCalls) {\n            toolCallMsgs = {\n                role: \"assistant\",\n                tool_calls: toolCalls,\n                content: \"\",\n            };\n        }\n    }\n    else if (messages.content.find((c) => c.type === \"tool_use\") &&\n        !messages.tool_calls?.length) {\n        throw new Error(\"'tool_use' content type is not supported without tool calls.\");\n    }\n    return [...textMessages, ...(toolCallMsgs ? [toolCallMsgs] : [])];\n}\nfunction convertHumanGenericMessagesToOllama(message) {\n    if (typeof message.content === \"string\") {\n        return [\n            {\n                role: \"user\",\n                content: message.content,\n            },\n        ];\n    }\n    return message.content.map((c) => {\n        if (c.type === \"text\") {\n            return {\n                role: \"user\",\n                content: c.text,\n            };\n        }\n        else if (c.type === \"image_url\") {\n            if (typeof c.image_url === \"string\") {\n                return {\n                    role: \"user\",\n                    content: \"\",\n                    images: [extractBase64FromDataUrl(c.image_url)],\n                };\n            }\n            else if (c.image_url.url && typeof c.image_url.url === \"string\") {\n                return {\n                    role: \"user\",\n                    content: \"\",\n                    images: [extractBase64FromDataUrl(c.image_url.url)],\n                };\n            }\n        }\n        throw new Error(`Unsupported content type: ${c.type}`);\n    });\n}\nfunction convertSystemMessageToOllama(message) {\n    if (typeof message.content === \"string\") {\n        return [\n            {\n                role: \"system\",\n                content: message.content,\n            },\n        ];\n    }\n    else if (message.content.every((c) => c.type === \"text\" && typeof c.text === \"string\")) {\n        return message.content.map((c) => ({\n            role: \"system\",\n            content: c.text,\n        }));\n    }\n    else {\n        throw new Error(`Unsupported content type(s): ${message.content\n            .map((c) => c.type)\n            .join(\", \")}`);\n    }\n}\nfunction convertToolMessageToOllama(message) {\n    if (typeof message.content !== \"string\") {\n        throw new Error(\"Non string tool message content is not supported\");\n    }\n    return [\n        {\n            role: \"tool\",\n            content: message.content,\n        },\n    ];\n}\nfunction convertToOllamaMessages(messages) {\n    return messages.flatMap((msg) => {\n        if ([\"human\", \"generic\"].includes(msg._getType())) {\n            return convertHumanGenericMessagesToOllama(msg);\n        }\n        else if (msg._getType() === \"ai\") {\n            return convertAMessagesToOllama(msg);\n        }\n        else if (msg._getType() === \"system\") {\n            return convertSystemMessageToOllama(msg);\n        }\n        else if (msg._getType() === \"tool\") {\n            return convertToolMessageToOllama(msg);\n        }\n        else {\n            throw new Error(`Unsupported message type: ${msg._getType()}`);\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/index.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/index.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatOllama: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatOllama),
/* harmony export */   Ollama: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.Ollama),
/* harmony export */   OllamaEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OllamaEmbeddings)
/* harmony export */ });
/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ "(rsc)/./node_modules/.pnpm/@langchain+ollama@0.1.4_@langchain+core@0.3.31_openai@4.79.1_ws@8.18.0_zod@3.24.1__/node_modules/@langchain/ollama/dist/index.js");


/***/ })

};
;